

// PRIVATE
		readonly IFieldDataService fieldDataService;
		ObservableCollection<FieldTable> fieldEntries;


// PROP
		public ObservableCollection<FieldTable> FieldEntries
		{
			get => this.fieldEntries;
			set
			{
				this.fieldEntries = value;
				OnPropertyChanged ();
			}
		}


// CON

		this.fieldDataService = new FieldApiDataService (new Uri ("https://evenstreaminfunctionapp.azurewebsites.net"));
		this.FieldEntries = new ObservableCollection<FieldTable> ();
		this.LoadEntries ();


// LOADS

		/// <summary>
		/// Calls the API and loads the returned data into a member variable
		/// </summary>
		private async Task LoadEntries ()
		{
			try
			{
				var entries = await fieldDataService.GetEntriesAsync ();
				this.FieldEntries = new ObservableCollection<FieldTable> (entries);
			}
			catch (Exception ex)
			{
				
				Debug.WriteLine ("Loading Fields Failed");
				Debug.WriteLine (ex.Message);
				await Application.Current.MainPage.Navigation.PopAsync ();
			}
		}



// EXTRA 

		FieldTable newField = new FieldTable ()
		{
			UID = App.UserID,
			FieldName = this.FieldName,
			PivotLength = this.PivotOptions[this.PivotIndex],
			SoilType = this.SoilOptions[this.SoilIndex],
			Latitude = this.Latitude,
			Longitude = this.Longitude,
			PivotRunning = false,
			StopTime = string.Empty,
			WaterUsage = 0
		};

		await this.fieldDataService.AddEntryAsync (newField);
		await Application.Current.MainPage.Navigation.PopModalAsync ();


		foreach (FieldTable field in this.FieldEntries)
		{
			if (field.UID == App.FieldID && field.UID == App.UserID)
			{
				
				count++;
			}
		}

		// If query fails then pop this page off the stack
		if (count != 1)
		{
			Debug.WriteLine ("Finding Current Field Failed");
			await Application.Current.MainPage.Navigation.PopAsync ();
		}












